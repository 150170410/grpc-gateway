// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/proto/examplepb/a_bit_of_everything.proto

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import grpc_gateway_examples_sub "github.com/grpc-ecosystem/grpc-gateway/examples/proto/sub"
import sub2 "github.com/grpc-ecosystem/grpc-gateway/examples/proto/sub2"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NumericEnum is one or zero.
type NumericEnum int32

const (
	// ZERO means 0
	NumericEnum_ZERO NumericEnum = 0
	// ONE means 1
	NumericEnum_ONE NumericEnum = 1
)

var NumericEnum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
}
var NumericEnum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
}

func (x NumericEnum) String() string {
	return proto.EnumName(NumericEnum_name, int32(x))
}
func (NumericEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// DeepEnum is one or zero.
type ABitOfEverything_Nested_DeepEnum int32

const (
	// FALSE is false.
	ABitOfEverything_Nested_FALSE ABitOfEverything_Nested_DeepEnum = 0
	// TRUE is true.
	ABitOfEverything_Nested_TRUE ABitOfEverything_Nested_DeepEnum = 1
)

var ABitOfEverything_Nested_DeepEnum_name = map[int32]string{
	0: "FALSE",
	1: "TRUE",
}
var ABitOfEverything_Nested_DeepEnum_value = map[string]int32{
	"FALSE": 0,
	"TRUE":  1,
}

func (x ABitOfEverything_Nested_DeepEnum) String() string {
	return proto.EnumName(ABitOfEverything_Nested_DeepEnum_name, int32(x))
}
func (ABitOfEverything_Nested_DeepEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0, 0}
}

// Intentionaly complicated message type to cover much features of Protobuf.
// NEXT ID: 30
type ABitOfEverything struct {
	SingleNested        *ABitOfEverything_Nested   `protobuf:"bytes,25,opt,name=single_nested,json=singleNested" json:"single_nested,omitempty"`
	Uuid                string                     `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Nested              []*ABitOfEverything_Nested `protobuf:"bytes,2,rep,name=nested" json:"nested,omitempty"`
	FloatValue          float32                    `protobuf:"fixed32,3,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	DoubleValue         float64                    `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	Int64Value          int64                      `protobuf:"varint,5,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value         uint64                     `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value          int32                      `protobuf:"varint,7,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value        uint64                     `protobuf:"fixed64,8,opt,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value        uint32                     `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue           bool                       `protobuf:"varint,10,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue         string                     `protobuf:"bytes,11,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue          []byte                     `protobuf:"bytes,29,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	Uint32Value         uint32                     `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	EnumValue           NumericEnum                `protobuf:"varint,14,opt,name=enum_value,json=enumValue,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"enum_value,omitempty"`
	Sfixed32Value       int32                      `protobuf:"fixed32,15,opt,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value       int64                      `protobuf:"fixed64,16,opt,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value         int32                      `protobuf:"zigzag32,17,opt,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value         int64                      `protobuf:"zigzag64,18,opt,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	RepeatedStringValue []string                   `protobuf:"bytes,19,rep,name=repeated_string_value,json=repeatedStringValue" json:"repeated_string_value,omitempty"`
	// Types that are valid to be assigned to OneofValue:
	//	*ABitOfEverything_OneofEmpty
	//	*ABitOfEverything_OneofString
	OneofValue               isABitOfEverything_OneofValue       `protobuf_oneof:"oneof_value"`
	MapValue                 map[string]NumericEnum              `protobuf:"bytes,22,rep,name=map_value,json=mapValue" json:"map_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=grpc.gateway.examples.examplepb.NumericEnum"`
	MappedStringValue        map[string]string                   `protobuf:"bytes,23,rep,name=mapped_string_value,json=mappedStringValue" json:"mapped_string_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MappedNestedValue        map[string]*ABitOfEverything_Nested `protobuf:"bytes,24,rep,name=mapped_nested_value,json=mappedNestedValue" json:"mapped_nested_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NonConventionalNameValue string                              `protobuf:"bytes,26,opt,name=nonConventionalNameValue" json:"nonConventionalNameValue,omitempty"`
	TimestampValue           *google_protobuf3.Timestamp         `protobuf:"bytes,27,opt,name=timestamp_value,json=timestampValue" json:"timestamp_value,omitempty"`
	// repeated enum value. it is comma-separated in query
	RepeatedEnumValue []NumericEnum `protobuf:"varint,28,rep,packed,name=repeated_enum_value,json=repeatedEnumValue,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"repeated_enum_value,omitempty"`
}

func (m *ABitOfEverything) Reset()                    { *m = ABitOfEverything{} }
func (m *ABitOfEverything) String() string            { return proto.CompactTextString(m) }
func (*ABitOfEverything) ProtoMessage()               {}
func (*ABitOfEverything) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isABitOfEverything_OneofValue interface {
	isABitOfEverything_OneofValue()
}

type ABitOfEverything_OneofEmpty struct {
	OneofEmpty *google_protobuf1.Empty `protobuf:"bytes,20,opt,name=oneof_empty,json=oneofEmpty,oneof"`
}
type ABitOfEverything_OneofString struct {
	OneofString string `protobuf:"bytes,21,opt,name=oneof_string,json=oneofString,oneof"`
}

func (*ABitOfEverything_OneofEmpty) isABitOfEverything_OneofValue()  {}
func (*ABitOfEverything_OneofString) isABitOfEverything_OneofValue() {}

func (m *ABitOfEverything) GetOneofValue() isABitOfEverything_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (m *ABitOfEverything) GetSingleNested() *ABitOfEverything_Nested {
	if m != nil {
		return m.SingleNested
	}
	return nil
}

func (m *ABitOfEverything) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ABitOfEverything) GetNested() []*ABitOfEverything_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *ABitOfEverything) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *ABitOfEverything) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *ABitOfEverything) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *ABitOfEverything) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

func (m *ABitOfEverything) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *ABitOfEverything) GetFixed64Value() uint64 {
	if m != nil {
		return m.Fixed64Value
	}
	return 0
}

func (m *ABitOfEverything) GetFixed32Value() uint32 {
	if m != nil {
		return m.Fixed32Value
	}
	return 0
}

func (m *ABitOfEverything) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *ABitOfEverything) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *ABitOfEverything) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *ABitOfEverything) GetUint32Value() uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return 0
}

func (m *ABitOfEverything) GetEnumValue() NumericEnum {
	if m != nil {
		return m.EnumValue
	}
	return NumericEnum_ZERO
}

func (m *ABitOfEverything) GetSfixed32Value() int32 {
	if m != nil {
		return m.Sfixed32Value
	}
	return 0
}

func (m *ABitOfEverything) GetSfixed64Value() int64 {
	if m != nil {
		return m.Sfixed64Value
	}
	return 0
}

func (m *ABitOfEverything) GetSint32Value() int32 {
	if m != nil {
		return m.Sint32Value
	}
	return 0
}

func (m *ABitOfEverything) GetSint64Value() int64 {
	if m != nil {
		return m.Sint64Value
	}
	return 0
}

func (m *ABitOfEverything) GetRepeatedStringValue() []string {
	if m != nil {
		return m.RepeatedStringValue
	}
	return nil
}

func (m *ABitOfEverything) GetOneofEmpty() *google_protobuf1.Empty {
	if x, ok := m.GetOneofValue().(*ABitOfEverything_OneofEmpty); ok {
		return x.OneofEmpty
	}
	return nil
}

func (m *ABitOfEverything) GetOneofString() string {
	if x, ok := m.GetOneofValue().(*ABitOfEverything_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (m *ABitOfEverything) GetMapValue() map[string]NumericEnum {
	if m != nil {
		return m.MapValue
	}
	return nil
}

func (m *ABitOfEverything) GetMappedStringValue() map[string]string {
	if m != nil {
		return m.MappedStringValue
	}
	return nil
}

func (m *ABitOfEverything) GetMappedNestedValue() map[string]*ABitOfEverything_Nested {
	if m != nil {
		return m.MappedNestedValue
	}
	return nil
}

func (m *ABitOfEverything) GetNonConventionalNameValue() string {
	if m != nil {
		return m.NonConventionalNameValue
	}
	return ""
}

func (m *ABitOfEverything) GetTimestampValue() *google_protobuf3.Timestamp {
	if m != nil {
		return m.TimestampValue
	}
	return nil
}

func (m *ABitOfEverything) GetRepeatedEnumValue() []NumericEnum {
	if m != nil {
		return m.RepeatedEnumValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ABitOfEverything) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ABitOfEverything_OneofMarshaler, _ABitOfEverything_OneofUnmarshaler, _ABitOfEverything_OneofSizer, []interface{}{
		(*ABitOfEverything_OneofEmpty)(nil),
		(*ABitOfEverything_OneofString)(nil),
	}
}

func _ABitOfEverything_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ABitOfEverything)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *ABitOfEverything_OneofEmpty:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OneofEmpty); err != nil {
			return err
		}
	case *ABitOfEverything_OneofString:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.OneofString)
	case nil:
	default:
		return fmt.Errorf("ABitOfEverything.OneofValue has unexpected type %T", x)
	}
	return nil
}

func _ABitOfEverything_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ABitOfEverything)
	switch tag {
	case 20: // oneof_value.oneof_empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Empty)
		err := b.DecodeMessage(msg)
		m.OneofValue = &ABitOfEverything_OneofEmpty{msg}
		return true, err
	case 21: // oneof_value.oneof_string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OneofValue = &ABitOfEverything_OneofString{x}
		return true, err
	default:
		return false, nil
	}
}

func _ABitOfEverything_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ABitOfEverything)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *ABitOfEverything_OneofEmpty:
		s := proto.Size(x.OneofEmpty)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ABitOfEverything_OneofString:
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.OneofString)))
		n += len(x.OneofString)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Nested is nested type.
type ABitOfEverything_Nested struct {
	// name is nested field.
	Name   string                           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Amount uint32                           `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Ok     ABitOfEverything_Nested_DeepEnum `protobuf:"varint,3,opt,name=ok,enum=grpc.gateway.examples.examplepb.ABitOfEverything_Nested_DeepEnum" json:"ok,omitempty"`
}

func (m *ABitOfEverything_Nested) Reset()                    { *m = ABitOfEverything_Nested{} }
func (m *ABitOfEverything_Nested) String() string            { return proto.CompactTextString(m) }
func (*ABitOfEverything_Nested) ProtoMessage()               {}
func (*ABitOfEverything_Nested) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *ABitOfEverything_Nested) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ABitOfEverything_Nested) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ABitOfEverything_Nested) GetOk() ABitOfEverything_Nested_DeepEnum {
	if m != nil {
		return m.Ok
	}
	return ABitOfEverything_Nested_FALSE
}

type Body struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Body) Reset()                    { *m = Body{} }
func (m *Body) String() string            { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()               {}
func (*Body) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Body) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MessageWithBody struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data *Body  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *MessageWithBody) Reset()                    { *m = MessageWithBody{} }
func (m *MessageWithBody) String() string            { return proto.CompactTextString(m) }
func (*MessageWithBody) ProtoMessage()               {}
func (*MessageWithBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *MessageWithBody) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageWithBody) GetData() *Body {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ABitOfEverything)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything")
	proto.RegisterType((*ABitOfEverything_Nested)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything.Nested")
	proto.RegisterType((*Body)(nil), "grpc.gateway.examples.examplepb.Body")
	proto.RegisterType((*MessageWithBody)(nil), "grpc.gateway.examples.examplepb.MessageWithBody")
	proto.RegisterEnum("grpc.gateway.examples.examplepb.NumericEnum", NumericEnum_name, NumericEnum_value)
	proto.RegisterEnum("grpc.gateway.examples.examplepb.ABitOfEverything_Nested_DeepEnum", ABitOfEverything_Nested_DeepEnum_name, ABitOfEverything_Nested_DeepEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ABitOfEverythingService service

type ABitOfEverythingServiceClient interface {
	Create(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	CreateBody(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	Lookup(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*ABitOfEverything, error)
	Update(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Delete(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetQuery(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Echo allows posting a StringMessage value.
	//
	// It also exposes multiple bindings.
	//
	// This makes it useful when validating that the OpenAPI v2 API
	// description exposes documentation correctly on all paths
	// defined as additional_bindings in the proto.
	Echo(ctx context.Context, in *grpc_gateway_examples_sub.StringMessage, opts ...grpc.CallOption) (*grpc_gateway_examples_sub.StringMessage, error)
	DeepPathEcho(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	NoBindings(ctx context.Context, in *google_protobuf2.Duration, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Timeout(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	ErrorWithDetails(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetMessageWithBody(ctx context.Context, in *MessageWithBody, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	PostWithEmptyBody(ctx context.Context, in *Body, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type aBitOfEverythingServiceClient struct {
	cc *grpc.ClientConn
}

func NewABitOfEverythingServiceClient(cc *grpc.ClientConn) ABitOfEverythingServiceClient {
	return &aBitOfEverythingServiceClient{cc}
}

func (c *aBitOfEverythingServiceClient) Create(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) CreateBody(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/CreateBody", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Lookup(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Update(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Delete(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) GetQuery(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Echo(ctx context.Context, in *grpc_gateway_examples_sub.StringMessage, opts ...grpc.CallOption) (*grpc_gateway_examples_sub.StringMessage, error) {
	out := new(grpc_gateway_examples_sub.StringMessage)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) DeepPathEcho(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/DeepPathEcho", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) NoBindings(ctx context.Context, in *google_protobuf2.Duration, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/NoBindings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Timeout(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Timeout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) ErrorWithDetails(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/ErrorWithDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) GetMessageWithBody(ctx context.Context, in *MessageWithBody, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetMessageWithBody", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) PostWithEmptyBody(ctx context.Context, in *Body, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/PostWithEmptyBody", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ABitOfEverythingService service

type ABitOfEverythingServiceServer interface {
	Create(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	CreateBody(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	Lookup(context.Context, *sub2.IdMessage) (*ABitOfEverything, error)
	Update(context.Context, *ABitOfEverything) (*google_protobuf1.Empty, error)
	Delete(context.Context, *sub2.IdMessage) (*google_protobuf1.Empty, error)
	GetQuery(context.Context, *ABitOfEverything) (*google_protobuf1.Empty, error)
	// Echo allows posting a StringMessage value.
	//
	// It also exposes multiple bindings.
	//
	// This makes it useful when validating that the OpenAPI v2 API
	// description exposes documentation correctly on all paths
	// defined as additional_bindings in the proto.
	Echo(context.Context, *grpc_gateway_examples_sub.StringMessage) (*grpc_gateway_examples_sub.StringMessage, error)
	DeepPathEcho(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	NoBindings(context.Context, *google_protobuf2.Duration) (*google_protobuf1.Empty, error)
	Timeout(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	ErrorWithDetails(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	GetMessageWithBody(context.Context, *MessageWithBody) (*google_protobuf1.Empty, error)
	PostWithEmptyBody(context.Context, *Body) (*google_protobuf1.Empty, error)
}

func RegisterABitOfEverythingServiceServer(s *grpc.Server, srv ABitOfEverythingServiceServer) {
	s.RegisterService(&_ABitOfEverythingService_serviceDesc, srv)
}

func _ABitOfEverythingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Create(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_CreateBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).CreateBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/CreateBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).CreateBody(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sub2.IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Lookup(ctx, req.(*sub2.IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Update(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sub2.IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Delete(ctx, req.(*sub2.IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).GetQuery(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_gateway_examples_sub.StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Echo(ctx, req.(*grpc_gateway_examples_sub.StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_DeepPathEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).DeepPathEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/DeepPathEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).DeepPathEcho(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_NoBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).NoBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/NoBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).NoBindings(ctx, req.(*google_protobuf2.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Timeout(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_ErrorWithDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).ErrorWithDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/ErrorWithDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).ErrorWithDetails(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_GetMessageWithBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWithBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).GetMessageWithBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetMessageWithBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).GetMessageWithBody(ctx, req.(*MessageWithBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_PostWithEmptyBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Body)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).PostWithEmptyBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/PostWithEmptyBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).PostWithEmptyBody(ctx, req.(*Body))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABitOfEverythingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.ABitOfEverythingService",
	HandlerType: (*ABitOfEverythingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ABitOfEverythingService_Create_Handler,
		},
		{
			MethodName: "CreateBody",
			Handler:    _ABitOfEverythingService_CreateBody_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _ABitOfEverythingService_Lookup_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ABitOfEverythingService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ABitOfEverythingService_Delete_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _ABitOfEverythingService_GetQuery_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _ABitOfEverythingService_Echo_Handler,
		},
		{
			MethodName: "DeepPathEcho",
			Handler:    _ABitOfEverythingService_DeepPathEcho_Handler,
		},
		{
			MethodName: "NoBindings",
			Handler:    _ABitOfEverythingService_NoBindings_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _ABitOfEverythingService_Timeout_Handler,
		},
		{
			MethodName: "ErrorWithDetails",
			Handler:    _ABitOfEverythingService_ErrorWithDetails_Handler,
		},
		{
			MethodName: "GetMessageWithBody",
			Handler:    _ABitOfEverythingService_GetMessageWithBody_Handler,
		},
		{
			MethodName: "PostWithEmptyBody",
			Handler:    _ABitOfEverythingService_PostWithEmptyBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/proto/examplepb/a_bit_of_everything.proto",
}

// Client API for CamelCaseServiceName service

type CamelCaseServiceNameClient interface {
	Empty(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type camelCaseServiceNameClient struct {
	cc *grpc.ClientConn
}

func NewCamelCaseServiceNameClient(cc *grpc.ClientConn) CamelCaseServiceNameClient {
	return &camelCaseServiceNameClient{cc}
}

func (c *camelCaseServiceNameClient) Empty(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.camelCaseServiceName/Empty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CamelCaseServiceName service

type CamelCaseServiceNameServer interface {
	Empty(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterCamelCaseServiceNameServer(s *grpc.Server, srv CamelCaseServiceNameServer) {
	s.RegisterService(&_CamelCaseServiceName_serviceDesc, srv)
}

func _CamelCaseServiceName_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CamelCaseServiceNameServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.camelCaseServiceName/Empty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CamelCaseServiceNameServer).Empty(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CamelCaseServiceName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.camelCaseServiceName",
	HandlerType: (*CamelCaseServiceNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Empty",
			Handler:    _CamelCaseServiceName_Empty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/proto/examplepb/a_bit_of_everything.proto",
}

// Client API for AnotherServiceWithNoBindings service

type AnotherServiceWithNoBindingsClient interface {
	NoBindings(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type anotherServiceWithNoBindingsClient struct {
	cc *grpc.ClientConn
}

func NewAnotherServiceWithNoBindingsClient(cc *grpc.ClientConn) AnotherServiceWithNoBindingsClient {
	return &anotherServiceWithNoBindingsClient{cc}
}

func (c *anotherServiceWithNoBindingsClient) NoBindings(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.AnotherServiceWithNoBindings/NoBindings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AnotherServiceWithNoBindings service

type AnotherServiceWithNoBindingsServer interface {
	NoBindings(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterAnotherServiceWithNoBindingsServer(s *grpc.Server, srv AnotherServiceWithNoBindingsServer) {
	s.RegisterService(&_AnotherServiceWithNoBindings_serviceDesc, srv)
}

func _AnotherServiceWithNoBindings_NoBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServiceWithNoBindingsServer).NoBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.AnotherServiceWithNoBindings/NoBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServiceWithNoBindingsServer).NoBindings(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnotherServiceWithNoBindings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.AnotherServiceWithNoBindings",
	HandlerType: (*AnotherServiceWithNoBindingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoBindings",
			Handler:    _AnotherServiceWithNoBindings_NoBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/proto/examplepb/a_bit_of_everything.proto",
}

func init() { proto.RegisterFile("examples/proto/examplepb/a_bit_of_everything.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcf, 0x6f, 0xdb, 0xc8,
	0xf5, 0xf7, 0x48, 0xb2, 0x62, 0x3d, 0xf9, 0x87, 0x3c, 0x4e, 0x1c, 0x47, 0x71, 0xd6, 0x13, 0x25,
	0xbb, 0x5f, 0xc6, 0x1b, 0x91, 0x1b, 0x65, 0xf1, 0xc5, 0xae, 0x80, 0xfe, 0x90, 0x6d, 0x6d, 0x12,
	0x64, 0xe3, 0x24, 0xcc, 0x6e, 0x1a, 0xb8, 0xd9, 0x1a, 0x14, 0x39, 0x92, 0x98, 0x88, 0x1c, 0x96,
	0x1c, 0x3a, 0x51, 0x55, 0xb7, 0x68, 0x17, 0x68, 0xb1, 0xa7, 0x02, 0xee, 0xbd, 0xe7, 0x5e, 0x7a,
	0x29, 0xd0, 0x53, 0x8b, 0xf6, 0xd8, 0x43, 0x8f, 0x05, 0x7a, 0xeb, 0xa1, 0x40, 0x0f, 0x45, 0x8f,
	0xfd, 0x0b, 0x8a, 0x19, 0x92, 0x0a, 0x25, 0x5b, 0x70, 0x94, 0x14, 0x7b, 0x49, 0x34, 0x33, 0x9f,
	0xf7, 0xde, 0xe7, 0xbd, 0x79, 0xef, 0xcd, 0xa3, 0xa1, 0x46, 0x5f, 0x1a, 0x8e, 0xd7, 0xa3, 0x81,
	0xe6, 0xf9, 0x8c, 0x33, 0x2d, 0x5e, 0x7a, 0x2d, 0xcd, 0xd8, 0x6f, 0xd9, 0x7c, 0x9f, 0xb5, 0xf7,
	0xe9, 0x01, 0xf5, 0xfb, 0xbc, 0x6b, 0xbb, 0x1d, 0x55, 0x62, 0xf0, 0x46, 0xc7, 0xf7, 0x4c, 0xb5,
	0x63, 0x70, 0xfa, 0xc2, 0xe8, 0xab, 0x89, 0x02, 0x75, 0x28, 0x5a, 0x5e, 0xef, 0x30, 0xd6, 0xe9,
	0x51, 0xcd, 0xf0, 0x6c, 0xcd, 0x70, 0x5d, 0xc6, 0x0d, 0x6e, 0x33, 0x37, 0x88, 0xc4, 0xcb, 0x17,
	0xe3, 0x53, 0xb9, 0x6a, 0x85, 0x6d, 0x8d, 0x3a, 0x1e, 0xef, 0xc7, 0x87, 0xef, 0x8c, 0x1f, 0x5a,
	0xa1, 0x2f, 0xa5, 0xe3, 0x73, 0x32, 0xc6, 0x37, 0x08, 0x5b, 0x9a, 0x43, 0x83, 0xc0, 0xe8, 0xd0,
	0x18, 0x71, 0xf9, 0x38, 0xa2, 0x36, 0x06, 0xd9, 0x18, 0x37, 0xc2, 0x6d, 0x87, 0x06, 0xdc, 0x70,
	0xbc, 0x18, 0x70, 0x5d, 0xfe, 0x67, 0x56, 0x3b, 0xd4, 0xad, 0x06, 0x2f, 0x8c, 0x4e, 0x87, 0xfa,
	0x1a, 0xf3, 0xa4, 0x13, 0xc7, 0x1d, 0xaa, 0xfc, 0xb1, 0x04, 0xa5, 0xc6, 0x96, 0xcd, 0xef, 0xb7,
	0x9b, 0xc3, 0x50, 0xe1, 0x2f, 0x60, 0x21, 0xb0, 0xdd, 0x4e, 0x8f, 0xee, 0xbb, 0x34, 0xe0, 0xd4,
	0x5a, 0xbb, 0x40, 0x90, 0x52, 0xac, 0x7d, 0xa4, 0x9e, 0x12, 0x3c, 0x75, 0x5c, 0x93, 0xba, 0x2b,
	0xe5, 0xf5, 0xf9, 0x48, 0x5d, 0xb4, 0xc2, 0x18, 0x72, 0x61, 0x68, 0x5b, 0x6b, 0x88, 0x20, 0xa5,
	0xa0, 0xcb, 0xdf, 0xf8, 0x01, 0xe4, 0x63, 0x5b, 0x19, 0x92, 0x7d, 0x2b, 0x5b, 0xb1, 0x1e, 0xbc,
	0x01, 0xc5, 0x76, 0x8f, 0x19, 0x7c, 0xff, 0xc0, 0xe8, 0x85, 0x74, 0x2d, 0x4b, 0x90, 0x92, 0xd1,
	0x41, 0x6e, 0x3d, 0x16, 0x3b, 0xf8, 0x32, 0xcc, 0x5b, 0x2c, 0x6c, 0xf5, 0x68, 0x8c, 0xc8, 0x11,
	0xa4, 0x20, 0xbd, 0x18, 0xed, 0x45, 0x90, 0x0d, 0x28, 0xda, 0x2e, 0xff, 0xff, 0x0f, 0x63, 0xc4,
	0x2c, 0x41, 0x4a, 0x56, 0x07, 0xb9, 0x35, 0xd4, 0x11, 0xa6, 0x11, 0x79, 0x82, 0x94, 0x9c, 0x5e,
	0x0c, 0x53, 0x90, 0x48, 0xc7, 0xcd, 0x5a, 0x8c, 0x38, 0x43, 0x90, 0x32, 0x2b, 0x75, 0xdc, 0xac,
	0x45, 0x80, 0x2b, 0xb0, 0xd0, 0xb6, 0x5f, 0x52, 0x6b, 0xa8, 0x64, 0x8e, 0x20, 0x25, 0xaf, 0xcf,
	0xc7, 0x9b, 0xa3, 0xa0, 0xa1, 0x9e, 0x02, 0x41, 0xca, 0x99, 0x18, 0x94, 0x68, 0xba, 0x04, 0xd0,
	0x62, 0xac, 0x17, 0x23, 0x80, 0x20, 0x65, 0x4e, 0x2f, 0x88, 0x9d, 0x21, 0xd9, 0x80, 0xfb, 0xb6,
	0xdb, 0x89, 0x01, 0x45, 0x19, 0xff, 0x62, 0xb4, 0x37, 0x24, 0xdb, 0xea, 0x73, 0x1a, 0xc4, 0x88,
	0x4b, 0x04, 0x29, 0xf3, 0x3a, 0xc8, 0xad, 0x11, 0x87, 0x87, 0x34, 0x16, 0x08, 0x52, 0x16, 0x22,
	0x87, 0x13, 0x16, 0x77, 0x01, 0xa8, 0x1b, 0x3a, 0x31, 0x60, 0x91, 0x20, 0x65, 0xb1, 0x76, 0xfd,
	0xd4, 0xeb, 0xdc, 0x0d, 0x1d, 0xea, 0xdb, 0x66, 0xd3, 0x0d, 0x1d, 0xbd, 0x20, 0xe4, 0x23, 0x65,
	0xef, 0xc2, 0x62, 0x30, 0xea, 0xf8, 0x12, 0x41, 0xca, 0x92, 0xbe, 0x10, 0x8c, 0x78, 0x3e, 0x84,
	0x0d, 0x83, 0x58, 0x22, 0x48, 0x29, 0x25, 0xb0, 0xd4, 0x75, 0x05, 0x69, 0xf6, 0xcb, 0x04, 0x29,
	0xcb, 0x7a, 0x31, 0x48, 0xb1, 0x8f, 0x21, 0x43, 0x3d, 0x98, 0x20, 0x05, 0x47, 0x90, 0x44, 0x4b,
	0x0d, 0xce, 0xf9, 0xd4, 0xa3, 0x06, 0xa7, 0xd6, 0xfe, 0x48, 0x40, 0x57, 0x48, 0x56, 0x29, 0xe8,
	0x2b, 0xc9, 0xe1, 0xa3, 0x54, 0x60, 0x3f, 0x86, 0x22, 0x73, 0xa9, 0xe8, 0x48, 0xa2, 0x61, 0xac,
	0x9d, 0x95, 0x05, 0xb5, 0xaa, 0x46, 0xc5, 0xac, 0x26, 0xc5, 0xac, 0x36, 0xc5, 0xe9, 0xed, 0x19,
	0x1d, 0x24, 0x58, 0xae, 0xf0, 0x15, 0x98, 0x8f, 0x44, 0x23, 0x5b, 0x6b, 0xe7, 0xc4, 0xb5, 0xdd,
	0x9e, 0xd1, 0x23, 0x85, 0x91, 0x11, 0xfc, 0x14, 0x0a, 0x8e, 0xe1, 0xc5, 0x3c, 0x56, 0x65, 0x09,
	0x7d, 0x6b, 0xfa, 0x12, 0xba, 0x67, 0x78, 0x92, 0x6e, 0xd3, 0xe5, 0x7e, 0x5f, 0x9f, 0x73, 0xe2,
	0x25, 0x7e, 0x09, 0x2b, 0x8e, 0xe1, 0x79, 0xe3, 0xfe, 0x9e, 0x97, 0x76, 0x6e, 0xbf, 0x91, 0x1d,
	0x6f, 0x24, 0x3e, 0x91, 0xc1, 0x65, 0x67, 0x7c, 0x3f, 0x65, 0x39, 0x2a, 0xeb, 0xd8, 0xf2, 0xda,
	0xdb, 0x59, 0x8e, 0x5a, 0xc5, 0x71, 0xcb, 0xa9, 0x7d, 0x5c, 0x87, 0x35, 0x97, 0xb9, 0xdb, 0xcc,
	0x3d, 0xa0, 0xae, 0xe8, 0x98, 0x46, 0x6f, 0xd7, 0x70, 0xa2, 0xbe, 0xb0, 0x56, 0x96, 0x95, 0x33,
	0xf1, 0x1c, 0x6f, 0xc3, 0xd2, 0xb0, 0x2d, 0xc7, 0x8c, 0x2f, 0xca, 0x1b, 0x2f, 0x1f, 0xbb, 0xf1,
	0xcf, 0x12, 0x9c, 0xbe, 0x38, 0x14, 0x89, 0x94, 0x3c, 0x85, 0x61, 0x26, 0xed, 0xa7, 0x0a, 0x6a,
	0x9d, 0x64, 0xa7, 0x2e, 0xa8, 0xe5, 0x44, 0x51, 0x33, 0x29, 0xac, 0xf2, 0xaf, 0x11, 0xe4, 0x5f,
	0xf5, 0x63, 0xd7, 0x70, 0x68, 0xd2, 0x8f, 0xc5, 0x6f, 0xbc, 0x0a, 0x79, 0xc3, 0x61, 0xa1, 0xcb,
	0xd7, 0x32, 0xb2, 0xc2, 0xe3, 0x15, 0x7e, 0x08, 0x19, 0xf6, 0x5c, 0x36, 0xd3, 0xc5, 0x5a, 0xe3,
	0x4d, 0x7b, 0xb4, 0xba, 0x43, 0xa9, 0x27, 0x89, 0x65, 0xd8, 0xf3, 0xca, 0x06, 0xcc, 0x25, 0x6b,
	0x5c, 0x80, 0xd9, 0x4f, 0x1a, 0x9f, 0x3e, 0x6a, 0x96, 0x66, 0xf0, 0x1c, 0xe4, 0x3e, 0xd3, 0x3f,
	0x6f, 0x96, 0x50, 0xd9, 0x86, 0x85, 0x91, 0xc4, 0xc4, 0x25, 0xc8, 0x3e, 0xa7, 0xfd, 0x98, 0xaf,
	0xf8, 0x89, 0xb7, 0x60, 0x36, 0x8a, 0x4e, 0xe6, 0x0d, 0xda, 0x4d, 0x24, 0x5a, 0xcf, 0x7c, 0x84,
	0xca, 0x3b, 0xb0, 0x7a, 0x72, 0x6e, 0x9e, 0x60, 0xf3, 0x6c, 0xda, 0x66, 0x21, 0xad, 0xe5, 0x47,
	0x89, 0x96, 0xf1, 0x3c, 0x3b, 0x41, 0xcb, 0x6e, 0x5a, 0xcb, 0xdb, 0xbc, 0x7b, 0xaf, 0xec, 0xd7,
	0xbf, 0x7b, 0xd4, 0x78, 0xb2, 0xf9, 0x18, 0xae, 0x7e, 0x62, 0xbb, 0x16, 0x61, 0x21, 0x27, 0x0e,
	0xf3, 0x29, 0x31, 0x5a, 0xe2, 0xe7, 0xb1, 0xc7, 0x5e, 0xed, 0x72, 0xee, 0x05, 0x75, 0x4d, 0xeb,
	0xd8, 0xbc, 0x1b, 0xb6, 0x54, 0x93, 0x39, 0x9a, 0xe0, 0x50, 0xa5, 0x26, 0x0b, 0xfa, 0x01, 0xa7,
	0xf1, 0x32, 0xa6, 0xb4, 0xb5, 0x90, 0x74, 0x32, 0x69, 0xaf, 0x52, 0x86, 0xdc, 0x16, 0xb3, 0xfa,
	0x27, 0x25, 0x51, 0xe5, 0x29, 0x2c, 0xdd, 0x8b, 0x86, 0x97, 0xef, 0xd8, 0xbc, 0x2b, 0x61, 0x8b,
	0x90, 0x19, 0xbe, 0xfc, 0x19, 0xdb, 0xc2, 0x1f, 0x43, 0xce, 0x32, 0xb8, 0x11, 0x7b, 0xff, 0xee,
	0xa9, 0xde, 0x0b, 0x25, 0xba, 0x14, 0xd9, 0x24, 0x50, 0x4c, 0xdd, 0xa2, 0xc8, 0x97, 0xbd, 0xa6,
	0x7e, 0xbf, 0x34, 0x83, 0xcf, 0x40, 0xf6, 0xfe, 0x6e, 0xb3, 0x84, 0x6a, 0xff, 0x5a, 0x81, 0xf3,
	0xe3, 0xfe, 0x3e, 0xa2, 0xfe, 0x81, 0x6d, 0x52, 0xfc, 0x9b, 0x2c, 0xe4, 0xb7, 0x7d, 0x51, 0x14,
	0xf8, 0xc6, 0xd4, 0x31, 0x2f, 0x4f, 0x2f, 0x52, 0xf9, 0x43, 0xe6, 0xa7, 0x7f, 0xfd, 0xe7, 0x2f,
	0x33, 0xbf, 0xcb, 0x54, 0x7e, 0x9b, 0xd1, 0x0e, 0x6e, 0x24, 0xd3, 0xea, 0x49, 0xb3, 0xaa, 0x36,
	0x48, 0x4d, 0x2e, 0x87, 0xda, 0x20, 0x3d, 0xa6, 0x1c, 0x6a, 0x83, 0xd4, 0xf3, 0x74, 0xa8, 0x05,
	0xd4, 0x33, 0x7c, 0x83, 0x33, 0x5f, 0x1b, 0x84, 0x23, 0x07, 0x83, 0xd4, 0x43, 0x77, 0xa8, 0x0d,
	0x46, 0x5e, 0xc7, 0x64, 0x9d, 0x3a, 0x7f, 0x35, 0x38, 0x1c, 0x6a, 0x83, 0x74, 0x97, 0xff, 0x46,
	0xc0, 0x7d, 0xcf, 0xa7, 0x6d, 0xfb, 0xa5, 0xb6, 0x79, 0x18, 0x19, 0x49, 0x89, 0x05, 0xe3, 0x7a,
	0x82, 0x71, 0x43, 0xc1, 0x98, 0xc0, 0x28, 0xc9, 0xf4, 0xcb, 0x76, 0xa8, 0x0d, 0x26, 0x75, 0xd4,
	0x43, 0xfc, 0x2b, 0x04, 0x10, 0xdd, 0x97, 0xcc, 0xa3, 0xaf, 0xe7, 0xce, 0x36, 0xe5, 0x95, 0x5d,
	0xad, 0x6c, 0x9c, 0x72, 0x61, 0x75, 0xb4, 0x89, 0x7f, 0x08, 0xf9, 0x4f, 0x19, 0x7b, 0x1e, 0x7a,
	0x78, 0x49, 0x15, 0x73, 0xbb, 0x7a, 0xc7, 0x8a, 0x93, 0xff, 0x4d, 0x2c, 0xab, 0xd2, 0xb2, 0x82,
	0xdf, 0x3b, 0x35, 0x55, 0xc4, 0xf8, 0x7c, 0x88, 0x7f, 0x86, 0x20, 0xff, 0xb9, 0x67, 0xbd, 0x61,
	0x3a, 0x4f, 0x18, 0x44, 0x2a, 0x37, 0x24, 0x8b, 0xf7, 0xcb, 0xaf, 0xc9, 0x42, 0x84, 0xe1, 0x17,
	0x08, 0xf2, 0x3b, 0xb4, 0x47, 0x39, 0x3d, 0x1e, 0x87, 0x49, 0x66, 0x9e, 0x1e, 0x35, 0xde, 0x6f,
	0x5d, 0x83, 0x45, 0x80, 0x86, 0x67, 0xdf, 0xa5, 0xfd, 0x46, 0xc8, 0xbb, 0x78, 0x06, 0xce, 0x43,
	0xfe, 0xbe, 0xf8, 0x59, 0xc3, 0x0b, 0x90, 0xf3, 0xa9, 0x61, 0xc1, 0xec, 0x0b, 0xdf, 0xe6, 0x34,
	0x0a, 0xcd, 0xe6, 0xeb, 0x86, 0xe6, 0x1f, 0x08, 0xe6, 0x6e, 0x51, 0xfe, 0x30, 0xa4, 0x7e, 0xff,
	0x7f, 0x19, 0x9c, 0xaf, 0xd0, 0x51, 0x43, 0xaf, 0xec, 0xc2, 0xfa, 0x49, 0x6d, 0x76, 0x68, 0x70,
	0xca, 0xf6, 0xfa, 0x04, 0x49, 0xef, 0x54, 0x7c, 0xfd, 0x34, 0xef, 0xbe, 0x2f, 0xd4, 0x27, 0x3e,
	0xfe, 0x39, 0x03, 0xb9, 0xa6, 0xd9, 0x65, 0x58, 0x99, 0xe0, 0x5f, 0x10, 0xb6, 0xd4, 0xe8, 0x4d,
	0x4b, 0x2e, 0xe3, 0xb5, 0x91, 0x95, 0x7f, 0xa3, 0xa3, 0xc6, 0x97, 0x08, 0xe6, 0xa9, 0xd9, 0x65,
	0x24, 0x88, 0xfa, 0x27, 0xcc, 0xc9, 0x95, 0xef, 0x99, 0x78, 0xf9, 0x51, 0xe8, 0x38, 0x86, 0xdf,
	0xaf, 0x93, 0x66, 0xbc, 0x55, 0x2e, 0xed, 0xd0, 0xc0, 0xf4, 0x6d, 0xf9, 0xd5, 0x29, 0x77, 0x2b,
	0x3b, 0x80, 0x47, 0xc3, 0x24, 0xd9, 0x4e, 0x19, 0x1c, 0x19, 0x9a, 0x2f, 0x4e, 0x0f, 0x8d, 0xa0,
	0xa6, 0x0d, 0xa2, 0x16, 0xb3, 0x77, 0xa1, 0x52, 0xd2, 0x0e, 0x6a, 0x43, 0xbc, 0x38, 0xab, 0x47,
	0x6f, 0xe5, 0x1e, 0xc6, 0xc7, 0x8e, 0xf0, 0xdf, 0x11, 0xcc, 0x8b, 0x71, 0xe4, 0x81, 0xc1, 0xbb,
	0x92, 0xe3, 0xd7, 0xd3, 0x69, 0x3a, 0xd2, 0x37, 0xa3, 0xf2, 0xe1, 0xa9, 0x49, 0x3d, 0xf2, 0x65,
	0xae, 0x8a, 0x77, 0x56, 0xd4, 0xdd, 0xde, 0x7b, 0x95, 0xd5, 0xb4, 0x2f, 0xb2, 0xaf, 0x46, 0xce,
	0x8e, 0x7c, 0x3d, 0xe0, 0x06, 0xc0, 0x2e, 0xdb, 0xb2, 0x5d, 0xcb, 0x76, 0x3b, 0x01, 0xbe, 0x70,
	0x2c, 0xb7, 0x77, 0xe2, 0xbf, 0x59, 0x4c, 0x4c, 0xfb, 0x19, 0xfc, 0x18, 0xce, 0x88, 0xa9, 0x95,
	0x85, 0x1c, 0x4f, 0x00, 0x4d, 0x14, 0xbe, 0x28, 0xdd, 0x3c, 0x87, 0x57, 0xd2, 0x5c, 0x79, 0xac,
	0xac, 0x0b, 0xa5, 0xa6, 0xef, 0x33, 0x5f, 0x0c, 0x0b, 0x3b, 0x94, 0x1b, 0x76, 0x2f, 0x98, 0xda,
	0xc0, 0x55, 0x69, 0xe0, 0x1d, 0xbc, 0x3e, 0x72, 0xb1, 0x42, 0xeb, 0x0b, 0x9b, 0x77, 0xad, 0x58,
	0xeb, 0xcf, 0x11, 0xe0, 0x5b, 0x94, 0x8f, 0x0f, 0x27, 0x1f, 0x9c, 0x7a, 0x6f, 0x63, 0x12, 0x13,
	0x69, 0xfc, 0x9f, 0xa4, 0x71, 0xb9, 0x72, 0x21, 0x4d, 0x43, 0x30, 0x68, 0x31, 0xab, 0xaf, 0x0d,
	0x44, 0xaf, 0x94, 0x43, 0x0c, 0xfe, 0x12, 0xc1, 0xf2, 0x03, 0x16, 0x70, 0xa1, 0x51, 0x8a, 0x4a,
	0x22, 0xaf, 0x37, 0x07, 0x4d, 0xb4, 0xae, 0x49, 0xeb, 0xd7, 0x2a, 0x57, 0xd3, 0xd6, 0x3d, 0x16,
	0x70, 0xc1, 0x40, 0x7e, 0x80, 0x46, 0x34, 0x92, 0xe4, 0x29, 0xff, 0x09, 0x1d, 0x35, 0x7e, 0x8f,
	0x70, 0x7b, 0xc2, 0xb0, 0x44, 0xac, 0x54, 0x39, 0x57, 0xab, 0xe4, 0x45, 0xd7, 0x36, 0xbb, 0x24,
	0xe8, 0xb2, 0xb0, 0x67, 0x11, 0x97, 0x71, 0xd2, 0xa2, 0x24, 0x0c, 0xa8, 0x45, 0x6c, 0x97, 0x78,
	0x3d, 0xc3, 0xa4, 0x84, 0xb5, 0x09, 0xef, 0x52, 0x62, 0x31, 0x33, 0x74, 0xa8, 0x1b, 0xfd, 0xc9,
	0x89, 0x98, 0xcc, 0x11, 0x8b, 0xcb, 0xe5, 0x87, 0xb0, 0x71, 0x52, 0xcf, 0x14, 0xe5, 0x96, 0x8c,
	0x67, 0x53, 0x76, 0x86, 0xda, 0x33, 0x38, 0x6b, 0x1a, 0x0e, 0xed, 0x6d, 0x1b, 0x01, 0x8d, 0x75,
	0x88, 0xe1, 0x01, 0xeb, 0x30, 0x1b, 0x7d, 0x45, 0x4f, 0x9b, 0x48, 0x17, 0x64, 0x0c, 0x57, 0xf0,
	0xf2, 0x48, 0x22, 0x89, 0xa3, 0xda, 0xf7, 0x60, 0xbd, 0xe1, 0x32, 0xde, 0xa5, 0x7e, 0x6c, 0x49,
	0x5c, 0x5e, 0xaa, 0xa8, 0xbe, 0x39, 0x52, 0x62, 0xd3, 0x1a, 0x9e, 0xd9, 0xfa, 0xc9, 0xec, 0x51,
	0xe3, 0x3f, 0x39, 0xcc, 0x61, 0xa5, 0x41, 0xb6, 0x6c, 0x2e, 0x82, 0x99, 0xea, 0x14, 0x4f, 0xe0,
	0x6c, 0x47, 0x7f, 0xb0, 0x5d, 0xbd, 0x15, 0x79, 0x4e, 0x3c, 0x9f, 0x3d, 0xa3, 0x26, 0x9f, 0x36,
	0x62, 0xe5, 0x92, 0xcb, 0x5c, 0xfa, 0xed, 0xd8, 0x33, 0x81, 0xae, 0x65, 0x6f, 0xa8, 0x1f, 0x6c,
	0x66, 0x51, 0x26, 0x57, 0x2b, 0x19, 0x9e, 0xd7, 0xb3, 0x4d, 0x79, 0x6d, 0xda, 0xb3, 0x80, 0xb9,
	0xb5, 0xd5, 0xf4, 0xce, 0xcb, 0x6a, 0x9b, 0xb1, 0xaa, 0x63, 0x3b, 0xb4, 0x7e, 0x0c, 0x59, 0x9f,
	0x80, 0xdc, 0xfb, 0x2a, 0x03, 0x4b, 0x50, 0xd8, 0x32, 0x02, 0xdb, 0x94, 0xef, 0x7b, 0x66, 0x0e,
	0xc1, 0xa5, 0x91, 0x17, 0x7f, 0x69, 0x2e, 0x53, 0x2e, 0x3c, 0xa9, 0x36, 0x1e, 0xdc, 0xa9, 0xde,
	0xa5, 0x7d, 0x92, 0x81, 0xbf, 0xa1, 0xe1, 0x04, 0xf0, 0x17, 0x34, 0x97, 0x55, 0x72, 0xb5, 0x2b,
	0x89, 0x93, 0x29, 0xde, 0x1a, 0x33, 0x42, 0xde, 0xd5, 0xc4, 0x3f, 0xcc, 0xb7, 0x7f, 0x40, 0xeb,
	0x1b, 0x93, 0x41, 0x9c, 0x3d, 0xa7, 0xee, 0xd6, 0x8f, 0xa1, 0x1c, 0x0d, 0x14, 0x18, 0xdf, 0xf2,
	0x0d, 0x97, 0x07, 0x44, 0x2c, 0x88, 0x61, 0x9a, 0x34, 0x08, 0x60, 0x3d, 0x1e, 0x33, 0xf0, 0x4a,
	0x7c, 0x28, 0x57, 0xc9, 0xe9, 0x36, 0xcc, 0x1a, 0x96, 0x63, 0xbb, 0xb8, 0x3e, 0x22, 0xea, 0x5a,
	0x23, 0x30, 0xc2, 0x19, 0x91, 0x30, 0x3b, 0xe0, 0xa2, 0x9f, 0x1e, 0x50, 0x62, 0xbb, 0x6d, 0xe6,
	0x3b, 0x32, 0x2c, 0xad, 0x0d, 0x58, 0x48, 0x87, 0x62, 0x66, 0x7c, 0xf4, 0x69, 0x5d, 0x9b, 0x38,
	0xfc, 0x8c, 0x43, 0xfd, 0x3b, 0x70, 0xfe, 0xde, 0xab, 0x1a, 0x4a, 0xa7, 0xc6, 0xb4, 0x29, 0xb1,
	0x57, 0x18, 0xf6, 0x97, 0x56, 0x5e, 0x66, 0xe5, 0xcd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf1,
	0x49, 0x51, 0x12, 0x64, 0x17, 0x00, 0x00,
}
